B_data %>%
filter(lambda1 == lambda.seq[27]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
B_data %>%
filter(lambda1 == lambda.seq[30]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
B_data %>%
filter(lambda1 == lambda.seq[30]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
{.[-(1:75),]}
B_data %>%
filter(lambda1 == lambda.seq[30]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
{.[-(1:75),]} %>%
plot(border = NA, breaks = 11)
B_data %>%
filter(lambda1 == lambda.seq[30]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
{.[-(1:75),]}
B_data %>%
filter(lambda1 == lambda.seq[30]) %>%
select(-lambda1, -lambda2, -var) %>%
{.[-(1:75),]}
B_data %>%
filter(lambda1 == lambda.seq[30]) %>%
select(-lambda1, -lambda2, -var) %>%
#{.[-(1:75),]} %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
## Function to calculate the solutions with GLMNET (regularization)
solve_rvar_glmnet <- function(X_list, Y, p,
lambda.seq, penalty.factor , ...) {
rdata <- rearrange_rvar_data(X_list, Y, p)
rdata$response
d <- nrow(X_list[[1]])
n_pf <- length(penalty.factor)
B_tibble <- tibble()
for (pf_val in penalty.factor) {
alpha <- (p+1) / (p * pf_val + 1)
glmnet_sparse <- glmnet(
x = as.matrix(rdata$covariates[, -c(1,2)]),
y = rdata$response[,-c(1:2)], family = "mgaussian",
lambda  = lambda.seq / alpha,
penalty.factor = rep(c(1, pf_val), c(d, d * p)), intercept = FALSE)#,...)
B_tibble <- process_coeffs(B_tibble, glmnet_sparse, penalty.factor = pf_val)
}
B_tibble <- B_tibble %>% arrange(lambda1, lambda2, var)
return(B_tibble)
}
## Function to calculate the solutions with GLMNET (regularization)
solve_rvar_glmnet <- function(X_list, Y, p,
lambda.seq, penalty.factor , ...) {
rdata <- rearrange_rvar_data(X_list, Y, p)
rdata$response
d <- nrow(X_list[[1]])
n_pf <- length(penalty.factor)
B_tibble <- tibble()
for (pf_val in penalty.factor) {
alpha <- (p + 1) / (p * pf_val + 1)
glmnet_sparse <- glmnet(
x = as.matrix(rdata$covariates[, -c(1,2)]),
y = rdata$response[,-c(1:2)], family = "mgaussian",
lambda  = lambda.seq / alpha,
penalty.factor = rep(c(1, pf_val), c(d, d * p)), intercept = FALSE)#,...)
B_tibble <- process_coeffs(B_tibble, glmnet_sparse, penalty.factor = pf_val)
}
B_tibble <- B_tibble %>% arrange(lambda1, lambda2, var)
return(B_tibble)
}
#########################
## SOLVING RVAR WITH GLMNET
#########################
lambda.seq      <- 10^(seq(1, -3, length.out = 50))
penalty.factor  <- 10^(seq(1, -2, length.out = 20))
B_data <- solve_rvar_glmnet(sims_data$X_list, sims_data$Y, sims_data$p,
lambda.seq = lambda.seq,
penalty.factor = penalty.factor)
dim(B_data)
par(mfrow = c(1,1))
B_data %>%
filter(lambda1 == lambda.seq[35]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
#########################
## SOLVING RVAR WITH GLMNET
#########################
lambda.seq      <- 10^(seq(1, -3, length.out = 50))
penalty.factor  <- 10^(seq(1, -2, length.out = 20))
B_data <- solve_rvar_glmnet(sims_data$X_list, sims_data$Y, sims_data$p,
lambda.seq = lambda.seq,
penalty.factor = penalty.factor)
dim(B_data)
par(mfrow = c(1,1))
B_data %>%
filter(lambda1 == lambda.seq[35]) %>%
select(-lambda1, -lambda2, -var)
## Function to calculate the solutions with GLMNET (regularization)
solve_rvar_glmnet <- function(X_list, Y, d, p,
lambda.seq, penalty.factor , ...) {
rdata <- rearrange_rvar_data(X_list, Y, p)
rdata$response
n_pf <- length(penalty.factor)
B_tibble <- tibble()
for (pf_val in penalty.factor) {
alpha <- (p + 1) / (p * pf_val + 1)
beta <- (p * pf_val + pf_val) / (p * pf_val + 1)
glmnet_sparse <- glmnet(
x = as.matrix(rdata$covariates[, -c(1,2)]),
y = rdata$response[,-c(1:2)], family = "mgaussian",
lambda  = lambda.seq / alpha,
penalty.factor = rep(c(alpha, beta), c(d, d * p)), intercept = FALSE)#,...)
B_tibble <- process_coeffs(d, p, B_tibble, glmnet_sparse, pf_val = pf_val)
}
B_tibble <- B_tibble %>% arrange(lambda1, lambda2, var)
return(B_tibble)
}
process_coeffs <- function(d, p, B_tibble, glmnet_sparse, pf_val) {
nlambda <- length(glmnet_sparse$lambda)
B_update <- B_tibble
for(lambda_ind in 1:nlambda) {
## Calculating penalty values:
alpha <- (p + 1) / (p * pf_val + 1)
beta <- (p * pf_val + pf_val) / (p * pf_val + 1)
lambda1 <- glmnet_sparse$lambda[lambda_ind] * alpha
lambda2 <- lambda1 * beta
## Merging B
B_update <- sapply(glmnet_sparse$beta,
function(x, ind) {return(x[, ind])}, ind = lambda_ind) %>%
t() %>%
as_tibble() %>%
mutate(lambda1 = lambda1,
lambda2 = lambda2,
var     = 1:d,
.before = 1) %>%
rbind(B_update)
}
return(B_update)
}
#########################
## SOLVING RVAR WITH GLMNET
#########################
lambda.seq      <- 10^(seq(1, -3, length.out = 50))
penalty.factor  <- 10^(seq(1, -2, length.out = 20))
B_data <- solve_rvar_glmnet(sims_data$X_list, sims_data$Y, sims_data$p,
lambda.seq = lambda.seq,
penalty.factor = penalty.factor)
par(mfrow = c(1,1))
B_data %>%
filter(lambda1 == lambda.seq[35]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
B_data
lambda.seq      <- 10^(seq(1, -3, length.out = 50))
penalty.factor  <- 10^(seq(1, -1, length.out = 20))
B_data <- solve_rvar_glmnet(sims_data$X_list, sims_data$Y, sims_data$p,
lambda.seq = lambda.seq,
penalty.factor = penalty.factor)
dim(B_data)
par(mfrow = c(1,1))
B_data %>%
filter(lambda1 == lambda.seq[35]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
B_data %>%
filter(lambda1 == lambda.seq[35])
B_data %>%
filter(lambda1 == lambda.seq[35]) %>%
select(-lambda1, -lambda2, -var)
B_data
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
log() %>%
plot()
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
log() %>%
plot(border = NA)
dim(B_data)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
log()
## Function to calculate the solutions with GLMNET (regularization)
solve_rvar_glmnet <- function(X_list, Y, d, p,
lambda.seq, penalty.factor , ...) {
rdata <- rearrange_rvar_data(X_list, Y, p)
rdata$response
n_pf <- length(penalty.factor)
B_tibble <- tibble()
for (pf_val in penalty.factor) {
alpha <- (p + 1) / (p * pf_val + 1)
beta <- (p * pf_val + pf_val) / (p * pf_val + 1)
glmnet_sparse <- glmnet(
x = as.matrix(rdata$covariates[, -c(1,2)]),
y = rdata$response[,-c(1:2)], family = "mgaussian",
lambda  = lambda.seq / alpha,
penalty.factor = rep(c(alpha, beta), c(d, d * p)), intercept = FALSE)#,...)
B_tibble <- process_coeffs(d, p, B_tibble, glmnet_sparse, pf_val = pf_val)
}
B_tibble <- B_tibble %>% arrange(lambda1, lambda2, var)
return(B_tibble)
}
process_coeffs <- function(d, p, B_tibble, glmnet_sparse, pf_val) {
nlambda <- length(glmnet_sparse$lambda)
B_update <- B_tibble
for(lambda_ind in 1:nlambda) {
## Calculating penalty values:
alpha <- (p + 1) / (p * pf_val + 1)
beta <- (p * pf_val + pf_val) / (p * pf_val + 1)
lambda1 <- glmnet_sparse$lambda[lambda_ind] * alpha
lambda2 <- lambda1 * beta
## Merging B
B_update <- sapply(glmnet_sparse$beta,
function(x, ind) {return(x[, ind])}, ind = lambda_ind) %>%
t() %>%
as_tibble() %>%
mutate(lambda1 = lambda1,
lambda2 = lambda2,
var     = 1:d,
.before = 1) %>%
rbind(B_update)
}
return(B_update)
}
lambda.seq      <- 10^(seq(1, -3, length.out = 10))
penalty.factor  <- 10^(seq(1, -1, length.out = 10))
B_data <- solve_rvar_glmnet(sims_data$X_list, sims_data$Y, sims_data$p,
lambda.seq = lambda.seq,
penalty.factor = penalty.factor)
#########################
## SOLVING RVAR WITH GLMNET
#########################
lambda.seq      <- 10^(seq(1, -3, length.out = 10))
penalty.factor  <- 10^(seq(1, -1, length.out = 10))
B_data <- solve_rvar_glmnet(sims_data$X_list, sims_data$Y, sims_data$p,
lambda.seq = lambda.seq,
penalty.factor = penalty.factor)
## Function to calculate the solutions with GLMNET (regularization)
solve_rvar_glmnet <- function(X_list, Y, d, p,
lambda.seq, penalty.factor , ...) {
rdata <- rearrange_rvar_data(X_list, Y, p)
rdata$response
n_pf <- length(penalty.factor)
B_tibble <- tibble()
for (pf_val in penalty.factor) {
alpha <- (p + 1) / (p * pf_val + 1)
beta <- (p * pf_val + pf_val) / (p * pf_val + 1)
glmnet_sparse <- glmnet(
x = as.matrix(rdata$covariates[, -c(1,2)]),
y = rdata$response[,-c(1:2)], family = "mgaussian",
lambda  = lambda.seq / alpha,
penalty.factor = rep(c(alpha, beta), c(d, d * p)), intercept = FALSE)#,...)
B_tibble <- process_coeffs(d, p, B_tibble, glmnet_sparse, pf_val = pf_val)
}
B_tibble <- B_tibble %>% arrange(lambda1, lambda2, var)
return(B_tibble)
}
process_coeffs <- function(d, p, B_tibble, glmnet_sparse, pf_val) {
nlambda <- length(glmnet_sparse$lambda)
B_update <- B_tibble
for(lambda_ind in 1:nlambda) {
## Calculating penalty values:
alpha <- (p + 1) / (p * pf_val + 1)
beta <- (p * pf_val + pf_val) / (p * pf_val + 1)
lambda1 <- glmnet_sparse$lambda[lambda_ind] * alpha
lambda2 <- lambda1 * beta
## Merging B
B_update <- sapply(glmnet_sparse$beta,
function(x, ind) {return(x[, ind])}, ind = lambda_ind) %>%
t() %>%
as_tibble() %>%
mutate(lambda1 = lambda1,
lambda2 = lambda2,
var     = 1:d,
.before = 1) %>%
rbind(B_update)
}
return(B_update)
}
## Function to calculate the solutions with GLMNET (regularization)
solve_rvar_glmnet <- function(d, p, X_list, Y,
lambda.seq, penalty.factor , ...) {
rdata <- rearrange_rvar_data(X_list, Y, p)
rdata$response
n_pf <- length(penalty.factor)
B_tibble <- tibble()
for (pf_val in penalty.factor) {
alpha <- (p + 1) / (p * pf_val + 1)
beta <- (p * pf_val + pf_val) / (p * pf_val + 1)
glmnet_sparse <- glmnet(
x = as.matrix(rdata$covariates[, -c(1,2)]),
y = rdata$response[,-c(1:2)], family = "mgaussian",
lambda  = lambda.seq / alpha,
penalty.factor = rep(c(alpha, beta), c(d, d * p)), intercept = FALSE)#,...)
B_tibble <- process_coeffs(d, p, B_tibble, glmnet_sparse, pf_val = pf_val)
}
B_tibble <- B_tibble %>% arrange(lambda1, lambda2, var)
return(B_tibble)
}
process_coeffs <- function(d, p, B_tibble, glmnet_sparse, pf_val) {
nlambda <- length(glmnet_sparse$lambda)
B_update <- B_tibble
for(lambda_ind in 1:nlambda) {
## Calculating penalty values:
alpha <- (p + 1) / (p * pf_val + 1)
beta <- (p * pf_val + pf_val) / (p * pf_val + 1)
lambda1 <- glmnet_sparse$lambda[lambda_ind] * alpha
lambda2 <- lambda1 * beta
## Merging B
B_update <- sapply(glmnet_sparse$beta,
function(x, ind) {return(x[, ind])}, ind = lambda_ind) %>%
t() %>%
as_tibble() %>%
mutate(lambda1 = lambda1,
lambda2 = lambda2,
var     = 1:d,
.before = 1) %>%
rbind(B_update)
}
return(B_update)
}
lambda.seq      <- 10^(seq(1, -3, length.out = 10))
penalty.factor  <- 10^(seq(1, -1, length.out = 10))
B_data <- solve_rvar_glmnet(d = d, p = p, sims_data$X_list, sims_data$Y, sims_data$p,
lambda.seq = lambda.seq,
penalty.factor = penalty.factor)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
log() %>%
plot(border = NA)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
log() %>%
plot(border = NA, break = 30)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
log() %>%
plot(border = NA, breaks = 30)
tol <- 10e-4
B_data %>%
filter(abs(lambda1 - lambda.seq[35]) < tol) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
tol <- 10e-3
B_data %>%
filter(abs(lambda1 - lambda.seq[35]) < tol) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
lambda.seq[35]
#########################
## SOLVING RVAR WITH GLMNET
#########################
lambda.seq      <- 10^(seq(1, -3, length.out = 10))
penalty.factor  <- 10^(seq(1, -1, length.out = 10))
B_data <- solve_rvar_glmnet(d = d, p = p, sims_data$X_list, sims_data$Y, sims_data$p,
lambda.seq = lambda.seq,
penalty.factor = penalty.factor)
dim(B_data)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
log() %>%
plot(border = NA, breaks = 30)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
{.[1:10,]} %>%
log() %>%
plot(border = NA, breaks = 30)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
{.[1:30,]} %>%
log() %>%
plot(border = NA, breaks = 30)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
{.[1:300,]} %>%
log() %>%
plot(border = NA, breaks = 30)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
{.[1:100,]} %>%
log() %>%
plot(border = NA, breaks = 30)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
{.[1:100,]} %>%
summary()
## Function to calculate the solutions with GLMNET (regularization)
solve_rvar_glmnet <- function(d, p, X_list, Y,
lambda.seq, penalty.factor , ...) {
rdata <- rearrange_rvar_data(X_list, Y, p)
rdata$response
n_pf <- length(penalty.factor)
B_tibble <- tibble()
for (pf_val in penalty.factor) {
alpha <- (p + 1) / (p * pf_val + 1)
beta <- (p * pf_val + pf_val) / (p * pf_val + 1)
glmnet_sparse <- glmnet(
x = as.matrix(rdata$covariates[, -c(1,2)]),
y = rdata$response[,-c(1:2)], family = "mgaussian",
lambda  = lambda.seq,
penalty.factor = rep(c(alpha, beta), c(d, d * p)), intercept = FALSE)#,...)
B_tibble <- process_coeffs(d, p, B_tibble, glmnet_sparse, pf_val = pf_val)
}
B_tibble <- B_tibble %>% arrange(lambda1, lambda2, var)
return(B_tibble)
}
process_coeffs <- function(d, p, B_tibble, glmnet_sparse, pf_val) {
nlambda <- length(glmnet_sparse$lambda)
B_update <- B_tibble
for(lambda_ind in 1:nlambda) {
## Calculating penalty values:
alpha <- (p + 1) / (p * pf_val + 1)
beta <- (p * pf_val + pf_val) / (p * pf_val + 1)
lambda1 <- glmnet_sparse$lambda[lambda_ind]
lambda2 <- lambda1 * pf_val
## Merging B
B_update <- sapply(glmnet_sparse$beta,
function(x, ind) {return(x[, ind])}, ind = lambda_ind) %>%
t() %>%
as_tibble() %>%
mutate(lambda1 = lambda1,
lambda2 = lambda2,
var     = 1:d,
.before = 1) %>%
rbind(B_update)
}
return(B_update)
}
#########################
## SOLVING RVAR WITH GLMNET
#########################
lambda.seq      <- 10^(seq(1, -3, length.out = 10))
penalty.factor  <- 10^(seq(1, -1, length.out = 10))
B_data <- solve_rvar_glmnet(d = d, p = p, sims_data$X_list, sims_data$Y, sims_data$p,
lambda.seq = lambda.seq,
penalty.factor = penalty.factor)
dim(B_data)
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
{.[1:100,]} %>%
summary()
B_data %>% select(lambda1, lambda2) %>%
as.matrix() %>%
{.[1:100,]} %>%
log() %>%
plot(border = NA, breaks = 30)
par(mfrow = c(1,1))
tol <- 10e-3
B_data %>%
filter(abs(lambda1 - lambda.seq[35]) < tol) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
B_data %>%
filter(lambda1 == lambda.seq[35]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
par(mfrow = c(1,1))
tol <- 10e-3
B_data %>%
filter(lambda1 == lambda.seq[35]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
#########################
## SOLVING RVAR WITH GLMNET
#########################
lambda.seq      <- 10^(seq(1, -3, length.out = 10))
penalty.factor  <- 10^(seq(1, -1, length.out = 10))
B_data <- solve_rvar_glmnet(d = d, p = p, sims_data$X_list, sims_data$Y, sims_data$p,
lambda.seq = lambda.seq,
penalty.factor = penalty.factor)
par(mfrow = c(1,1))
B_data %>%
filter(lambda1 == lambda.seq[35]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
par(mfrow = c(1,1))
B_data %>%
filter(lambda1 == lambda.seq[5]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
par(mfrow = c(1,1))
B_data %>%
filter(lambda1 == lambda.seq[6]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
B_data %>%
filter(lambda1 == lambda.seq[6]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 111)
B_data %>%
filter(lambda1 == lambda.seq[6]) %>%
select(-lambda1, -lambda2, -var) %>%
as.matrix() %>%
plot(border = NA, breaks = 11)
